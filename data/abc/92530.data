{'TMP': 'C:\\Users\\taro\\AppData\\Local\\Temp', 'COMPUTERNAME': 'KPC-ZT051V7', 'USERDOMAIN': 'kpc-zt051v7', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'x86 Family 6 Model 60 Stepping 3, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '3c03', 'SYSTEMROOT': 'C:\\Windows', 'PATH': 'C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Python27;C:\\Python27\\Scripts', 'PYTHON2': 'C:\\Python27', 'PYTHON2SCRIPTS': 'C:\\Python27\\Scripts', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\taro\\AppData\\Local', 'HOMEPATH': '\\Users\\taro', 'USERNAME': 'taro', 'LOGONSERVER': '\\\\KPC-ZT051V7', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\taro\\AppData\\Roaming', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'TEMP': 'C:\\Users\\taro\\AppData\\Local\\Temp', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'HTTP_PROXY': 'ksv-proxy01.kmt.neec.ac.jp:8080', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '1', 'HTTPS_PROXY': 'ksv-proxy01.kmt.neec.ac.jp:8080', 'PROCESSOR_LEVEL': '6', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\taro'}